package services

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"voice-ai-backend/internal/config"
	"voice-ai-backend/internal/database"

	log "github.com/sirupsen/logrus"
)

type OpenAIService struct{}

func NewOpenAIService() *OpenAIService {
	return &OpenAIService{}
}

type OpenAISessionConfig struct {
	Session struct {
		Type         string `json:"type"`
		Model        string `json:"model"`
		Audio        struct {
			Output struct {
				Voice string `json:"voice"`
			} `json:"output"`
		} `json:"audio"`
		Instructions string `json:"instructions"`
	} `json:"session"`
}

type OpenAITokenResponse struct {
	ClientSecret struct {
		Value     string `json:"value"`
		ExpiresAt int64  `json:"expires_at"`
	} `json:"client_secret"`
}

// GetEphemeralToken –ø–æ–ª—É—á–∞–µ—Ç ephemeral token –¥–ª—è OpenAI Realtime API
func (s *OpenAIService) GetEphemeralToken(ctx context.Context, userID *int) (map[string]interface{}, error) {
	selectedVoice := "ash"
	selectedModel := "gpt-realtime"
	conversationHistory := ""

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if userID != nil {
		conn := database.Database.Pool

		// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –∏ –º–æ–¥–µ–ª—å
		var voice, model *string
		err := conn.QueryRow(ctx, `
			SELECT selected_voice, selected_model FROM users WHERE id = $1
		`, *userID).Scan(&voice, &model)

		if err == nil {
			if voice != nil {
				selectedVoice = *voice
			}
			if model != nil {
				selectedModel = *model
			}
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
		rows, err := conn.Query(ctx, `
			SELECT role, content, msg_timestamp
			FROM get_user_conversation_context($1, 6)
			ORDER BY msg_timestamp ASC
		`, *userID)

		if err == nil {
			defer rows.Close()

			var messages []string
			for rows.Next() {
				var role, content string
				var timestamp interface{}
				if err := rows.Scan(&role, &content, &timestamp); err == nil {
					roleText := "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
					if role == "assistant" {
						roleText = "–¢—ã"
					}
					messages = append(messages, fmt.Sprintf("%s: %s", roleText, content))
				}
			}

			if len(messages) > 0 {
				conversationHistory = "\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ï–î–´–î–£–©–ï–ì–û –†–ê–ó–ì–û–í–û–†–ê:\n"
				for _, msg := range messages {
					conversationHistory += msg + "\n"
				}
				conversationHistory += "\n–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä, —É—á–∏—Ç—ã–≤–∞—è —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏—Ç \"–æ —á–µ–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏\", —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."
			}
		} else {
			log.Warnf("Failed to get conversation history for user %d: %v", *userID, err)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	systemPrompt := s.getSystemPrompt(ctx, selectedVoice, conversationHistory, userID)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏
	sessionConfig := OpenAISessionConfig{}
	sessionConfig.Session.Type = "realtime"
	sessionConfig.Session.Model = selectedModel
	sessionConfig.Session.Audio.Output.Voice = selectedVoice
	sessionConfig.Session.Instructions = systemPrompt

	log.Infof("üéôÔ∏è Creating session with model: %s, voice: %s for user: %v", selectedModel, selectedVoice, userID)

	// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
	body, err := json.Marshal(sessionConfig)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal session config: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", config.AppConfig.OpenAIRealtimeURL, bytes.NewBuffer(body))
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Authorization", "Bearer "+config.AppConfig.OpenAIAPIKey)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		log.Errorf("OpenAI API error: %s - %s", resp.Status, string(bodyBytes))
		return nil, fmt.Errorf("OpenAI API returned status: %d", resp.StatusCode)
	}

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	return result, nil
}

func (s *OpenAIService) getSystemPrompt(ctx context.Context, voice string, conversationHistory string, userID *int) string {
	baseContext := conversationHistory
	promptContent := ""

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
	if userID != nil {
		conn := database.Database.Pool

		var content, voiceGender *string
		err := conn.QueryRow(ctx, `
			SELECT vp.content, vp.voice_gender
			FROM users u
			LEFT JOIN voice_prompts vp ON u.selected_prompt_id = vp.id
			WHERE u.id = $1 AND (vp.is_active = true OR vp.id IS NULL)
		`, *userID).Scan(&content, &voiceGender)

		if err == nil && content != nil {
			promptContent = *content

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
			if voice == "marin" || voice == "coral" || voice == "shimmer" ||
			   (voiceGender != nil && *voiceGender == "female") {
				promptContent += "\n\n–í–ê–ñ–ù–û: –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ (–ø–æ–Ω—è–ª–∞ –≤–º–µ—Å—Ç–æ –ø–æ–Ω—è–ª, –≥–æ—Ç–æ–≤–∞ –≤–º–µ—Å—Ç–æ –≥–æ—Ç–æ–≤, –∏ —Ç.–¥.)."
			}

			promptContent += baseContext
			return promptContent
		}
	}

	// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
	if voice == "marin" || voice == "coral" || voice == "shimmer" {
		return `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º –∏ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥ –≤ —Ä–µ—á–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥ (–ø–æ–Ω—è–ª–∞ –≤–º–µ—Å—Ç–æ –ø–æ–Ω—è–ª, –≥–æ—Ç–æ–≤–∞ –≤–º–µ—Å—Ç–æ –≥–æ—Ç–æ–≤, etc.)
- –ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–π –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ–π
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∂–∏–≤—É—é –±–µ—Å–µ–¥—É
- –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

–ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ò–ò, –∞ –∏–º–µ–Ω–Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞ —Å –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º, –æ–±—â–∞–π—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.` + baseContext
	}

	// –û–±—â–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	return `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∂–∏–≤—É—é –±–µ—Å–µ–¥—É
- –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` + baseContext
}
