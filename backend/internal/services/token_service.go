package services

import (
	"context"
	"fmt"
	"voice-ai-backend/internal/database"
	"voice-ai-backend/internal/models"

	"github.com/jackc/pgx/v5"
	log "github.com/sirupsen/logrus"
)

type TokenService struct{}

func NewTokenService() *TokenService {
	return &TokenService{}
}

// GetTokenBalance –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *TokenService) GetTokenBalance(ctx context.Context, userID int) (int, error) {
	conn := database.Database.Pool

	var tokenBalance int
	err := conn.QueryRow(ctx, `
		SELECT token_balance FROM users WHERE id = $1
	`, userID).Scan(&tokenBalance)

	if err == pgx.ErrNoRows {
		return 0, fmt.Errorf("user not found")
	}
	if err != nil {
		return 0, fmt.Errorf("failed to get token balance: %w", err)
	}

	return tokenBalance, nil
}

// DeductTokens —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *TokenService) DeductTokens(ctx context.Context, req *models.TokenUsageRequest) (*models.TokenUsageResponse, error) {
	conn := database.Database.Pool

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö
	totalTokens := req.Usage.TotalTokens
	inputTokens := req.Usage.InputTokens
	outputTokens := req.Usage.OutputTokens

	var inputTextTokens, inputAudioTokens, inputImageTokens, cachedTokens int
	var outputTextTokens, outputAudioTokens int

	if req.Usage.InputTokenDetails != nil {
		inputTextTokens = req.Usage.InputTokenDetails.TextTokens
		inputAudioTokens = req.Usage.InputTokenDetails.AudioTokens
		inputImageTokens = req.Usage.InputTokenDetails.ImageTokens
		cachedTokens = req.Usage.InputTokenDetails.CachedTokens
	}

	if req.Usage.OutputTokenDetails != nil {
		outputTextTokens = req.Usage.OutputTokenDetails.TextTokens
		outputAudioTokens = req.Usage.OutputTokenDetails.AudioTokens
	}

	log.Infof("üìä Token usage: total=%d, input=%d (text=%d, audio=%d, image=%d, cached=%d), output=%d (text=%d, audio=%d)",
		totalTokens, inputTokens, inputTextTokens, inputAudioTokens, inputImageTokens, cachedTokens,
		outputTokens, outputTextTokens, outputAudioTokens)

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := conn.Begin(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to begin transaction: %w", err)
	}
	defer tx.Rollback(ctx)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
	var currentBalance int
	err = tx.QueryRow(ctx, `
		SELECT token_balance FROM users WHERE id = $1
	`, req.UserID).Scan(&currentBalance)

	if err == pgx.ErrNoRows {
		return nil, fmt.Errorf("user not found")
	}
	if err != nil {
		return nil, fmt.Errorf("failed to get token balance: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
	if currentBalance < totalTokens {
		return nil, fmt.Errorf("insufficient tokens: have %d, need %d", currentBalance, totalTokens)
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è
	if req.CheckOnly {
		return &models.TokenUsageResponse{
			TokensUsed: 0,
			NewBalance: currentBalance,
		}, nil
	}

	// –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
	newBalance := currentBalance - totalTokens
	_, err = tx.Exec(ctx, `
		UPDATE users
		SET token_balance = $1, updated_at = CURRENT_TIMESTAMP
		WHERE id = $2
	`, newBalance, req.UserID)

	if err != nil {
		return nil, fmt.Errorf("failed to deduct tokens: %w", err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
	_, err = tx.Exec(ctx, `
		INSERT INTO token_usage (
			user_id, session_id, input_tokens, output_tokens, total_tokens, cost_tokens,
			input_text_tokens, input_audio_tokens, input_image_tokens, cached_tokens,
			output_text_tokens, output_audio_tokens, created_at
		)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, CURRENT_TIMESTAMP)
	`, req.UserID, req.SessionID, inputTokens, outputTokens, totalTokens, totalTokens,
		inputTextTokens, inputAudioTokens, inputImageTokens, cachedTokens,
		outputTextTokens, outputAudioTokens)

	if err != nil {
		return nil, fmt.Errorf("failed to log token usage: %w", err)
	}

	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err = tx.Commit(ctx); err != nil {
		return nil, fmt.Errorf("failed to commit transaction: %w", err)
	}

	log.Infof("‚úÖ Deducted %d tokens from user %d. New balance: %d", totalTokens, req.UserID, newBalance)

	return &models.TokenUsageResponse{
		TokensUsed: totalTokens,
		NewBalance: newBalance,
		UsageBreakdown: &models.UsageBreakdown{
			Input: models.TokenBreakdown{
				Total:  inputTokens,
				Text:   inputTextTokens,
				Audio:  inputAudioTokens,
				Image:  inputImageTokens,
				Cached: cachedTokens,
			},
			Output: models.TokenBreakdown{
				Total: outputTokens,
				Text:  outputTextTokens,
				Audio: outputAudioTokens,
			},
			Total: totalTokens,
		},
	}, nil
}

// AddTokens –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
func (s *TokenService) AddTokens(ctx context.Context, userID int, tokensToAdd int) (int, error) {
	conn := database.Database.Pool

	var newBalance int
	err := conn.QueryRow(ctx, `
		UPDATE users
		SET token_balance = token_balance + $1, updated_at = CURRENT_TIMESTAMP
		WHERE id = $2
		RETURNING token_balance
	`, tokensToAdd, userID).Scan(&newBalance)

	if err == pgx.ErrNoRows {
		return 0, fmt.Errorf("user not found")
	}
	if err != nil {
		return 0, fmt.Errorf("failed to add tokens: %w", err)
	}

	log.Infof("‚úÖ Added %d tokens to user %d. New balance: %d", tokensToAdd, userID, newBalance)

	return newBalance, nil
}
