#!/bin/bash

# üöÄ Voice AI Chat - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ VPS
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh

set -e

echo "üöÄ Voice AI Chat - Production Deployment"
echo "=========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f .env ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–∑ .env.example:"
    echo "cp .env.example .env"
    echo "–ò –∑–∞–ø–æ–ª–Ω–∏—Ç–µ OPENAI_API_KEY"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
source .env
if [ -z "$OPENAI_API_KEY" ] || [ "$OPENAI_API_KEY" = "sk-your-openai-api-key-here" ]; then
    echo "‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    exit 1
fi

echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
echo ""

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose down

# –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üî® –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã..."
docker-compose build --no-cache

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose up -d

# –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º backend..."
if curl -f http://localhost:8080/api/health > /dev/null 2>&1; then
    echo "‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    echo "‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!"
    echo "–õ–æ–≥–∏ backend:"
    docker-compose logs backend --tail 50
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ frontend –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend..."
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    echo "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!"
    echo "–õ–æ–≥–∏ frontend:"
    docker-compose logs frontend --tail 50
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL..."
if docker-compose exec -T postgres pg_isready -U voiceai > /dev/null 2>&1; then
    echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    echo "‚ùå PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!"
    docker-compose logs postgres --tail 50
    exit 1
fi

echo ""
echo "=========================================="
echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo "=========================================="
echo ""
echo "üì° –°–µ—Ä–≤–∏—Å—ã:"
echo "  Frontend:  http://localhost:3000"
echo "  Backend:   http://localhost:8080/api"
echo "  Health:    http://localhost:8080/api/health"
echo ""
echo "üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:  docker-compose logs -f"
echo "  –õ–æ–≥–∏ backend:        docker-compose logs -f backend"
echo "  –õ–æ–≥–∏ frontend:       docker-compose logs -f frontend"
echo "  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë:      docker-compose down"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å:       docker-compose restart"
echo ""
echo "üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
